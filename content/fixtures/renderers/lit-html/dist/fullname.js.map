{"version":3,"file":"fullname.js","sources":["../../../../packages/swiss-element/dist/swiss-element.mjs","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/directive.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/dom.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/part.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/template.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/template-instance.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/template-result.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/parts.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/default-template-processor.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/template-factory.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lib/render.js","../../../../site/content/fixtures/renderers/lit-html/node_modules/lit-html/lit-html.js","../src/fullname.js"],"sourcesContent":["function renderer(root, html) {\n  root.innerHTML = html;\n}\n\nconst isArray = Array.isArray;\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\nfunction getNativeConstructor(ext) {\n  return ext ? document.createElement(ext).constructor : HTMLElement;\n}\n\nfunction define(name, Element, options) {\n  if (name) {\n    self.customElements.define(name, Element, options);\n  }\n}\n\nfunction findFreeTagName(name, suffix = null) {\n  name = name || 's';\n  const tag = suffix ? `${name}-${suffix}` : name;\n  return isFreeTagName(tag) ? tag : findFreeTagName(tag, uniqueId());\n}\n\nfunction isFreeTagName(name) {\n  return /.-./.test(name) && !self.customElements.get(name);\n}\n\nfunction compose(...fns) {\n  return x => fns.filter(Boolean).reduceRight((y, f) => f(y), x);\n}\n\nfunction camelCase(name) {\n  return name.replace(/-([a-z])/g, ($0, $1) => $1.toUpperCase());\n}\n\nconst CustomEvent =\n  (isFunction(self.CustomEvent) && self.CustomEvent) || CustomEventPonyfill;\n\nfunction CustomEventPonyfill(name, params = {}) {\n  var newEvent = document.createEvent('CustomEvent');\n  newEvent.initCustomEvent(name, params.bubbles, params.cancelable, params);\n  return newEvent;\n}\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @param {string} prefix The value to prefix the ID with.\n * @return {string} Returns the unique ID.\n * @example\n *\n *    uniqueId('contact_');\n *    // => 'contact_104'\n *\n *    uniqueId();\n *    // => '105'\n */\nlet idCounter = 0;\nfunction uniqueId(prefix = '') {\n  var id = ++idCounter;\n  return `${prefix}${id}`;\n}\n\nfunction extend(Base, init) {\n  function Class() {\n    if (!(this instanceof Class)) {\n      return new Class();\n    }\n\n    const supr = () => {\n      return typeof Reflect !== 'undefined'\n        ? Reflect.construct(Base, [], this.constructor)\n        : Base.call(this);\n    };\n\n    return init.call(this, supr);\n  }\n\n  Class.prototype = Object.create(Base.prototype);\n  Class.prototype.constructor = Class;\n\n  return Class;\n}\n\n/**\n * Create a complete assign function with custom descriptors.\n * @param  {Object} options - The custom descriptor options.\n * @return {Function}\n */\nfunction createCompleteAssign(options) {\n  return (target, ...sources) => {\n    sources.forEach(source => {\n      for (const prop in source) {\n        const descriptor = Object.getOwnPropertyDescriptor(source, prop);\n        Object.defineProperty(target, prop, Object.assign(descriptor, options));\n      }\n    });\n    return target;\n  };\n}\n\n/**\n * Complete assign is used to copy the values of all enumerable own properties from one or more source objects to a target object, including getters and setters. It will return the target object. Properties are still allowed to be overridden.\n *\n * @param  {Object} target\n * @param  {...Object} sources\n * @return {Object} The target with assigned properties\n */\nconst completeAssign = createCompleteAssign({\n  configurable: true\n});\n\nconst CONNECTED = 'connected';\nconst DISCONNECTED = 'dis' + CONNECTED;\n\nfunction createFactory(supr, component) {\n  function createElement(options, enhancer) {\n    if (!isUndefined(enhancer)) {\n      return enhancer(createElement)(options);\n    }\n\n    const el = supr();\n    let oldHtml;\n\n    if (options.shadow) {\n      el.attachShadow({ mode: options.shadow });\n    }\n\n    function requestUpdate() {\n      const html = component.call(el, el);\n      return el.render(html);\n    }\n\n    function render(html) {\n      el.renderer(el.renderRoot, html, oldHtml);\n      oldHtml = html;\n      return html;\n    }\n\n    function connectedCallback() {\n      el.requestUpdate();\n      el.dispatchEvent(new CustomEvent(CONNECTED));\n    }\n\n    function disconnectedCallback() {\n      el.dispatchEvent(new CustomEvent(DISCONNECTED));\n    }\n\n    function attributeChangedCallback(name, oldValue, newValue) {\n      if (el.shouldUpdate(name, oldValue, newValue)) {\n        el.requestUpdate();\n      }\n    }\n\n    function shouldUpdate(name, oldValue, newValue) {\n      return oldValue !== newValue;\n    }\n\n    return completeAssign(el, {\n      render,\n      renderer,\n      connectedCallback,\n      disconnectedCallback,\n      attributeChangedCallback,\n      requestUpdate,\n      shouldUpdate,\n      get renderRoot() {\n        return el.shadowRoot || el._shadowRoot || el;\n      }\n    });\n  }\n\n  return createElement;\n}\n\nlet now = null;\nconst current = () => now;\n\nconst empty = [];\nconst setup = [];\n\nconst $ = (value, args) =>\n  typeof value === typeof $ ? value.apply(null, args) : value;\n\nconst diff = (a, b) => (a.length !== b.length || a.some(diverse, b));\n\nconst stacked = id => runner => {\n  const state = {i: 0, stack: []};\n  runner[id] = state;\n  runner.before.push(() => {\n    state.i = 0;\n  });\n};\n\nlet id = 0;\nconst uid = () => '_$' + id++;\n\nconst unstacked = id => {\n  const {[id]: state, update} = now;\n  const {i, stack} = state;\n  state.i++;\n  return {i, stack, update, unknown: i === stack.length};\n};\n\nvar augmentor = fn => {\n  const current = runner($);\n  each(setup, current);\n  $.reset = () => {\n    each(current.reset, current);\n    for (const key in current) {\n      if (/^_\\$/.test(key))\n        current[key].stack.splice(0);\n    }\n  };\n  return $;\n  function $() {\n    const prev = now;\n    now = current;\n    const {_, before, after, external} = current;\n    try {\n      let result;\n      do {\n        _.$ = _._ = false;\n        each(before, current);\n        result = fn.apply(_.c = this, _.a = arguments);\n        each(after, current);\n        if (external.length)\n          each(external.splice(0), result);\n      } while (_._);\n      return result;\n    }\n    finally {\n      _.$ = true;\n      now = prev;\n    }\n  }\n};\n\nconst each = (arr, value) => {\n  const {length} = arr;\n  let i = 0;\n  while (i < length)\n    arr[i++](value);\n};\n\nconst runner = $ => {\n  const _ = {\n    _: true,\n    $: true,\n    c: null,\n    a: null\n  };\n  return {\n    _: _,\n    before: [],\n    after: [],\n    external: [],\n    reset: [],\n    update: () => _.$ ? $.apply(_.c, _.a) : (_._ = true)\n  };\n};\n\nfunction diverse(value, i) {\n  return value !== this[i];\n}\n\nconst id$1 = uid();\n\nlet cancel, request;\n\ntry {\n  cancel = cancelAnimationFrame;\n  request = requestAnimationFrame;\n} catch (o_O) {\n  cancel = clearTimeout;\n  request = setTimeout;\n}\n\nconst create = (always, check, inputs, raf, cb, stack, i) => {\n  const info = {\n    always,\n    cb,\n    check,\n    clean: null,\n    inputs,\n    raf,\n    t: 0,\n    update: check,\n    fn: () => {\n      set(stack[i], info.cb());\n    }\n  };\n  return info;\n};\n\nconst effect = raf => (cb, refs) => {\n  const {i, stack, unknown} = unstacked(id$1);\n  const comp = refs || empty;\n  if (unknown) {\n    const always = comp === empty;\n    const check = always || !raf || typeof comp !== typeof effect;\n    if (always || !raf || typeof comp !== typeof effect) {\n      stack.push(create(always, check, comp, raf, cb, stack, i));\n    } else {\n      current().external.push(result => refs(cb, result));\n      stack.push(create(always, always, empty, raf, effect, stack, i));\n    }\n  } else {\n    const info = stack[i];\n    const {check, always, inputs} = info;\n    if (check && (always || diff(inputs, comp))) {\n      info.cb = cb;\n      info.inputs = comp;\n      info.update = true;\n    }\n  }\n};\n\nconst set = (info, clean) => {\n  info.t = 0;\n  info.clean = clean;\n};\n\nsetup.push(runner => {\n  const stack = [];\n  const state = {i: 0, stack};\n  const drop = (current$$1, clean, raf, t) => {\n    if (raf && t)\n      cancel(t);\n    else if (clean)\n      clean();\n    set(current$$1, null);\n  };\n  runner[id$1] = state;\n  runner.before.push(() => {\n    state.i = 0;\n  });\n  runner.reset.push(() => {\n    state.i = 0;\n    for (let {length} = stack, i = 0; i < length; i++) {\n      const current$$1 = stack[i];\n      const {check, clean, raf, t} = current$$1;\n      if (check)\n        drop(current$$1, clean, raf, t);\n    }\n  });\n  runner.after.push(() => {\n    for (let {length} = stack, i = 0; i < length; i++) {\n      const current$$1 = stack[i];\n      const {check, clean, fn, raf, t, update} = current$$1;\n      if (check && update) {\n        current$$1.update = false;\n        drop(current$$1, clean, raf, t);\n        if (raf)\n          current$$1.t = request(fn);\n        else\n          fn();\n      }\n    }\n  });\n});\n\nconst useEffect = effect(true);\n\nconst id$2 = uid();\n\nsetup.push(stacked(id$2));\n\nvar ref = value => {\n  const {i, stack, unknown} = unstacked(id$2);\n  if (unknown) {\n    const info = {current: null};\n    stack.push(info);\n    info.current = $(value, empty);\n  }\n  return stack[i];\n};\n\nconst id$3 = uid();\n\nsetup.push(stacked(id$3));\n\nvar useMemo = (callback, refs) => {\n  const {i, stack, unknown} = unstacked(id$3);\n  const comp = refs || empty;\n  if (unknown)\n    create$1(stack, -1, callback, comp);\n  const {filter, value, fn, inputs} = stack[i];\n  return (filter ? diff(inputs, comp) : (callback !== fn)) ?\n          create$1(stack, i, callback, comp) :\n          value;\n};\n\nconst create$1 = (stack, i, fn, inputs) => {\n  const info = {\n    filter: inputs !== empty,\n    value: null,\n    fn,\n    inputs\n  };\n  if (i < 0)\n    stack.push(info);\n  else\n    stack[i] = info;\n  info.value = fn();\n  return info.value;\n};\n\nvar callback = (fn, inputs) => useMemo(() => fn, inputs);\n\nconst id$4 = uid();\n\nsetup.push(stacked(id$4));\n\nvar useReducer = (reducer, value) => {\n  const {i, stack, unknown, update} = unstacked(id$4);\n  if (unknown) {\n    const info = [null, action => {\n      value = reducer(value, action);\n      info[0] = value;\n      update();\n    }];\n    stack.push(info);\n    info[0] = $(value, empty);\n  }\n  return stack[i];\n};\n\nvar state = value => useReducer(\n  (_, value) => $(value, [_]),\n  value\n);\n\nconst all = new WeakMap;\nconst id$5 = uid();\n\nsetup.push(stacked(id$5));\n\nconst createContext = value => {\n  const context = {\n    value,\n    provide\n  };\n  all.set(context, []);\n  return context;\n};\n\nconst useContext = context => {\n  const {i, stack, unknown, update} = unstacked(id$5);\n  if (unknown) {\n    all.get(context).push(update);\n    stack.push(context);\n  }\n  return stack[i].value;\n};\n\nfunction provide(value) {\n  if (this.value !== value) {\n    this.value = value;\n    for (let arr = all.get(this), {length} = arr, i = 0; i < length; i++)\n      arr[i]();\n  }\n}\n\n/**\n * Holds the current element that is being rendered.\n * @type {Object}\n */\nconst CurrentElement = {\n  current: null\n};\n\nfunction hooks(createElement) {\n  return options => {\n    const el = createElement(options);\n    const { component } = options;\n\n    const requestUpdate = augmentor(function() {\n      CurrentElement.current = el;\n      const html = component.call(el, el);\n      return el.render(html);\n    });\n\n    el.requestUpdate = requestUpdate;\n    return el;\n  };\n}\n\nfunction propsToAttrs(createElement) {\n  return options => {\n    const el = createElement(options);\n    addPropsToAttrs(Object.getPrototypeOf(el), options.observedAttributes);\n    return el;\n  };\n}\n\nfunction addPropsToAttrs(proto, attributes) {\n  attributes.forEach(name => {\n    // it is possible to redefine the behavior at any time\n    // simply overwriting get prop() and set prop(value)\n    if (!(name in proto)) {\n      Object.defineProperty(proto, camelCase(name), {\n        configurable: true,\n        get() {\n          return this.getAttribute(name);\n        },\n        set(value) {\n          if (value == null) this.removeAttribute(name);\n          else this.setAttribute(name, value);\n        }\n      });\n    }\n  });\n}\n\nconst CALLBACK = 'Callback';\nconst CONNECTED_CALLBACK = 'connected' + CALLBACK;\nconst DISCONNECTED_CALLBACK = 'dis' + CONNECTED_CALLBACK;\nconst ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK;\nconst ADOPTED_CALLBACK = 'adopted' + CALLBACK;\nconst OBSERVED_ATTRIBUTES = 'observedAttributes';\n\n// The `hooks` and `propsToAttrs` enhancers are added by default.\nconst defaultEnhancers = [hooks, propsToAttrs];\n\n/**\n * Defines a custom element in the `CustomElementRegistry` which renders the component which is passed as an argument.\n *\n * @param  {string} name The tag name for the custom element.\n * @param  {Function} component The component that is rendered in the element.\n * @param  {Function} [enhancer] The element enhancer. You may optionally specify it to enhance the element with third-party capabilities such as middleware, custom renderer, public API, etc. The only element enhancers that ship with Swiss Element are `applyMiddleware` and `renderer`.\n * @param  {Object|Array} [options] An options object with 2 optional properties `observedAttributes` and `extends` (e.g. `extends: 'button'`). You can also just pass an array which will be the `observedAttributes` array for shorter syntax.\n *\n * The options object is also passed to all the enhancers.\n *\n * @return {HTMLElement}\n */\nfunction element(name, component, enhancer, options) {\n  if (isFunction(name)) {\n    options = enhancer;\n    enhancer = component;\n    component = name;\n    name = undefined;\n  }\n\n  if (!isFunction(enhancer) && isUndefined(options)) {\n    options = enhancer;\n    enhancer = undefined;\n  }\n\n  // To shorten syntax if options is an array assume it's `observedAttributes`.\n  if (isArray(options)) {\n    options = { [OBSERVED_ATTRIBUTES]: options };\n  }\n\n  options = options || {};\n  name = options.name = findFreeTagName(name || options.name);\n\n  if (!isUndefined(enhancer) && !isFunction(enhancer)) {\n    throw new Error('Expected the enhancer to be a function.');\n  }\n\n  enhancer = compose(\n    enhancer,\n    ...defaultEnhancers\n  );\n\n  const Native = getNativeConstructor(options && options.extends);\n  const SwissElement = extend(Native, function(supr) {\n    const opts = completeAssign({}, options, { component });\n    return createFactory(supr, component)(opts, enhancer);\n  });\n\n  // Callbacks have to be on the prototype before construction.\n  forwardCallbacks(SwissElement.prototype, [\n    CONNECTED_CALLBACK,\n    DISCONNECTED_CALLBACK,\n    ATTRIBUTE_CHANGED_CALLBACK,\n    ADOPTED_CALLBACK\n  ]);\n\n  const oa = (options[OBSERVED_ATTRIBUTES] =\n    options[OBSERVED_ATTRIBUTES] || []);\n  SwissElement[OBSERVED_ATTRIBUTES] = oa;\n\n  define(name, SwissElement, options);\n  return SwissElement;\n}\n\nfunction forwardCallbacks(proto, callbacks) {\n  callbacks.forEach(cb => {\n    proto[cb] = function(...args) {\n      if (this.hasOwnProperty(cb)) {\n        this[cb](...args);\n      }\n    };\n  });\n}\n\nfunction useElement() {\n  return CurrentElement.current;\n}\n\nconst CONNECTED$1 = 'connected';\nconst DISCONNECTED$1 = 'dis' + CONNECTED$1;\n\nfunction useEffect$1(fn, inputs = []) {\n  const args = [fn];\n  if (inputs) {\n    // if the inputs is an empty array\n    // observe the returned element for connect/disconnect events\n    // and invoke effects/cleanup on these events only\n    const element = useElement();\n    // Capture the current element immediately here because the lifecycle handler\n    // is async, requestAnimationFrame / setTimeout.\n    args.push(inputs.length ? inputs : createLifecycleHandler(element));\n  }\n  return useEffect.apply(null, args);\n}\n\nfunction createLifecycleHandler(element) {\n  return $ => {\n    const handler = { handleEvent, onconnected, ondisconnected, $, _: null };\n    element.addEventListener(CONNECTED$1, handler);\n    element.addEventListener(DISCONNECTED$1, handler);\n  };\n}\n\nfunction handleEvent(e) {\n  this['on' + e.type]();\n}\n\nfunction onconnected() {\n  ondisconnected.call(this);\n  this._ = this.$();\n}\n\nfunction ondisconnected() {\n  const { _ } = this;\n  this._ = null;\n  if (_) _();\n}\n\n/**\n * Adds a simple way to define your own renderer.\n * Verified libraries working by passing just the `render` or `patch` function:\n *\n * - Lighterhtml\n * - Lit-html\n * - HTM-Preact\n * - Superfine\n *\n * @param  {Function} customRenderer A function that takes the custom element root and a function `html` which once executed renders the created dom nodes to the root node of the custom element.\n *\n * @return {Function}\n */\nfunction renderer$1(customRenderer = renderer) {\n  return createElement => (...args) => {\n    const element = createElement(...args);\n\n    const renderWays = [\n      // default\n      (root, html, old) => customRenderer(root, html, old),\n      // lit-html, htm-preact\n      (root, html, old) => customRenderer(html, root, old),\n      // superfine\n      (root, html, old) => customRenderer(old, html, root),\n      // lighterhtml\n      (root, html, old) => customRenderer(root, () => html, old)\n    ];\n\n    /**\n     * Most library render functions look very similar, do a quick search on the\n     * first render. Probably shouldn't do this but it's so damn convenient :P\n     *\n     * This function is only called on the first render pass, after it's cached.\n     *\n     * @param  {HTMLElement} root\n     * @param  {Node|Function} html\n     * @param  {Number} i\n     * @return {*}\n     */\n    function findRenderWay(root, html, old, i = 0) {\n      element.renderer = renderWays[i];\n\n      let result;\n      try {\n        result = element.renderer(root, html, old);\n      } catch (err) {\n        i += 1;\n        if (i < renderWays.length) {\n          return findRenderWay(root, html, old, i);\n        }\n      }\n\n      return result || '';\n    }\n\n    element.renderer = findRenderWay;\n    return element;\n  };\n}\n\n/**\n * Middleware is the suggested way to extend Swiss Element with custom functionality. Middleware lets you wrap the element's render method for fun and profit. The key feature of middleware is that it is composable. Multiple middleware can be combined together, where each middleware requires no knowledge of what comes before or after it in the chain.\n *\n * @param  {...Function} middleware Functions that conform to the Swiss Element _middleware_ API. Each middleware receives `SwissElement`'s `render` function as a named argument, and returns a function. That function will be given the `next` middleware's render method, and is expected to return a function of `fragment` calling `next(fragment)` with a potentially different argument, or at a different time, or maybe not calling it at all. The last middleware in the chain will receive the real element's `render` method as the `next` parameter, thus ending the chain. So, the middleware signature is `({ render }) => next => fragment`.\n *\n * @return {Function}\n */\nfunction applyMiddleware(...middleware) {\n  return createElement => (...args) => {\n    const element = createElement(...args);\n\n    let render = () => {\n      throw new Error(\n        `Rendering while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this render.`\n      );\n    };\n\n    const middlewareAPI = {\n      render: (...args) => render(...args)\n    };\n\n    const chain = middleware.map(mw => mw(middlewareAPI));\n    render = compose(...chain)(element.render.bind(element));\n\n    element.render = render;\n    return element;\n  };\n}\n\nexport { renderer$1 as renderer, applyMiddleware, compose, defaultEnhancers, element, callback as useCallback, useMemo, useReducer, ref as useRef, state as useState, createContext, useContext, useEffect$1 as useEffect, useElement };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","import { element, useState, renderer } from 'swiss-element';\nimport { html, render } from 'lit-html';\n\nfunction dispatch(el, first, last) {\n  let event = new CustomEvent('change', {\n    detail: first + ' ' + last\n  });\n  el.dispatchEvent(event);\n}\n\nfunction App() {\n  const [name, setName] = useState('');\n\n  return html`\n    <div class=\"box\">\n      <h2 class=\"title\">User Page</h2>\n      <h3 class=\"subtitle\">${name}</h3>\n\n      <full-name @change=\"${ev => ev.detail && setName(ev.detail)}\"> </full-name>\n    </div>\n  `;\n}\n\nelement('my-app', App, renderer(render));\n\nfunction FullName(el) {\n  const [first, setFirst] = useState('Leonhard');\n  const [last, setLast] = useState('Euler ✍️');\n\n  dispatch(el, first, last);\n\n  return html`\n    <div class=\"field\">\n      <label class=\"label\">First name</label>\n      <div class=\"control\">\n        <input class=\"input\"\n          value=\"${first}\"\n          @keyup=\"${ev => setFirst(ev.target.value)}\">\n      </div>\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">Last name</label>\n      <div class=\"control\">\n        <input class=\"input\"\n          value=\"${last}\"\n          @keyup=\"${ev => setLast(ev.target.value)}\">\n      </div>\n    </div>\n  `;\n}\n\nelement('full-name', FullName, renderer(render));\n"],"names":["renderer","root","html","innerHTML","isArray","Array","isFunction","value","isUndefined","findFreeTagName","name","suffix","tag","test","self","customElements","get","isFreeTagName","prefix","id","idCounter","uniqueId","CustomEvent","params","newEvent","document","createEvent","initCustomEvent","bubbles","cancelable","completeAssign","options","target","sources","forEach","source","prop","descriptor","Object","getOwnPropertyDescriptor","defineProperty","_extends","createCompleteAssign","configurable","CONNECTED","DISCONNECTED","cancel","request","now","empty","setup","$","args","apply","stacked","runner","state","i","stack","before","push","uid","augmentor","fn","current","each","reset","key","splice","prev","_","after","external","result","c","this","a","arguments","length","arr","update","id$1","cancelAnimationFrame","requestAnimationFrame","o_O","clearTimeout","setTimeout","drop","current$$1","clean","raf","t","info","set","check","id$2","id$3","id$4","useReducer","reducer","unknown","unstacked","action","id$5","CONNECTED_CALLBACK","DISCONNECTED_CALLBACK","ATTRIBUTE_CHANGED_CALLBACK","ADOPTED_CALLBACK","OBSERVED_ATTRIBUTES","defaultEnhancers","createElement","el","component","requestUpdate","call","render","proto","getPrototypeOf","observedAttributes","replace","$0","$1","toUpperCase","camelCase","getAttribute","removeAttribute","setAttribute","element","enhancer","undefined","Error","fns","x","filter","Boolean","reduceRight","y","f","ext","SwissElement","Base","init","Class","Reflect","construct","_this","constructor","prototype","create","extend","extends","HTMLElement","supr","opts","oldHtml","shadow","attachShadow","mode","renderRoot","connectedCallback","dispatchEvent","disconnectedCallback","attributeChangedCallback","oldValue","newValue","shouldUpdate","shadowRoot","_shadowRoot","createFactory","cb","hasOwnProperty","oa","Element","define","renderer$1","customRenderer","renderWays","old","findRenderWay","err","directives","WeakMap","isDirective","o","has","isCEPolyfill","window","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","split","type","tagName","data","parent","parentNode","_strings","lastIndex","_i","insertBefore","createMarker","createTextNode","_parent","previousSibling","_i2","isTemplatePartActive","part","createComment","TemplateInstance","processor","_parts","values","setValue","commit","_clone","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","_part2","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","getHTML","endIndex","s","match","substr","getTemplateElement","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","_getValue","l","text","v","Symbol","iterator","comitter","committer","directive","NodePart","_pendingValue","appendInto","appendChild","ref","appendIntoPart","_insert","insertAfterPart","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","instance","itemPart","itemParts","item","BooleanAttributePart","PropertyCommitter","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","_boundHandleEvent","e","_this2","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","_options","getOptions","event","defaultTemplateProcessor","templateCache","templateCaches","stringsArray","keyString","Map","join","firstChild","useState","setName","ev","detail","first","setFirst","last","setLast","dispatch"],"mappings":"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"}